package com.inmaa.admin.persistence;
// Generated 16 avr. 2016 20:28:19 by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * SubEvent generated by hbm2java
 */
@Entity
@Table(name = "SubEvent", catalog = "inmaa")
public class SubEvent implements java.io.Serializable {

	private Integer subEventId;
	private Integer seqNo;
	private String subEventName;
	private String subEventLogo;
	private Date subEventStartDate;
	private Date subEventEndDate;
	private String subEventLocation;
	private Set<Event> events = new HashSet<Event>(0);

	public SubEvent() {
	}

	public SubEvent(String subEventName, Date subEventStartDate, Date subEventEndDate) {
		this.subEventName = subEventName;
		this.subEventStartDate = subEventStartDate;
		this.subEventEndDate = subEventEndDate;
	}

	public SubEvent(Integer seqNo, String subEventName, String subEventLogo, Date subEventStartDate,
			Date subEventEndDate, String subEventLocation, Set<Event> events) {
		this.seqNo = seqNo;
		this.subEventName = subEventName;
		this.subEventLogo = subEventLogo;
		this.subEventStartDate = subEventStartDate;
		this.subEventEndDate = subEventEndDate;
		this.subEventLocation = subEventLocation;
		this.events = events;
	}

	public SubEvent(SubEvent object) {
 		this.subEventId = object.subEventId;
		this.seqNo = object.seqNo;
		this.subEventName = object.subEventName;
		this.subEventLogo = object.subEventLogo;
		this.subEventStartDate = object.subEventStartDate;
		this.subEventEndDate = object.subEventEndDate;
		this.subEventLocation = object.subEventLocation;
		this.events = object.events;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "SubEvent_ID", unique = true, nullable = false)
	public Integer getSubEventId() {
		return this.subEventId;
	}

	public void setSubEventId(Integer subEventId) {
		this.subEventId = subEventId;
	}

	@Column(name = "SeqNo")
	public Integer getSeqNo() {
		return this.seqNo;
	}

	public void setSeqNo(Integer seqNo) {
		this.seqNo = seqNo;
	}

	@Column(name = "SubEvent_Name", nullable = false)
	public String getSubEventName() {
		return this.subEventName;
	}

	public void setSubEventName(String subEventName) {
		this.subEventName = subEventName;
	}

	@Column(name = "SubEvent_Logo", length = 90)
	public String getSubEventLogo() {
		return this.subEventLogo;
	}

	public void setSubEventLogo(String subEventLogo) {
		this.subEventLogo = subEventLogo;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "SubEvent_StartDate", nullable = false, length = 19)
	public Date getSubEventStartDate() {
		return this.subEventStartDate;
	}

	public void setSubEventStartDate(Date subEventStartDate) {
		this.subEventStartDate = subEventStartDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "SubEvent_EndDate", nullable = false, length = 19)
	public Date getSubEventEndDate() {
		return this.subEventEndDate;
	}

	public void setSubEventEndDate(Date subEventEndDate) {
		this.subEventEndDate = subEventEndDate;
	}

	@Column(name = "SubEvent_Location", length = 90)
	public String getSubEventLocation() {
		return this.subEventLocation;
	}

	public void setSubEventLocation(String subEventLocation) {
		this.subEventLocation = subEventLocation;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "SubEvent_Event", catalog = "inmaa", joinColumns = {
			@JoinColumn(name = "SubEvent_ID", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "Event_ID", nullable = false, updatable = false) })
	public Set<Event> getEvents() {
		return this.events;
	}

	public void setEvents(Set<Event> events) {
		this.events = events;
	}

}
